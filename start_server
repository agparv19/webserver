#!/usr/bin/env python3
"""
Just run ./start_server

This will create a HTTP server listening at LOCALHOST:PORT
"""

import socket
import multiprocessing
import threading
import os
import time

# Max number of connections in the queue
BACKLOG = 5

# Max size of data read from a socket
MAX_DATA_SIZE = 1024

# Encoding style
STYLE = "utf-8"

# Localhost
LOCALHOST = "127.0.0.1"

# Port to start the server at
PORT = 2000

# of Worker processes/threads
WORKER_SIZE = 4

# Uses multi-processing if set to 0
USE_THREADING = 0

def get_page(path):
    WEB_DIR = "www" # a dir to store all webpages
    if path == "":
        return None
    if path == "/":
        path = "/index.html"

    try:
        with open (WEB_DIR + path, 'r') as file:
            content = file.read()
        return content
    except FileNotFoundError as f:
        return None

def handle_request(client_socket):

    # Uncomment this to test speed in I/O bound task
    # time.sleep(2)

    data = client_socket.recv(MAX_DATA_SIZE).decode(STYLE)
    lines = data.split('\r\n')
    if lines:
        line = lines[0]
        words = line.split(' ')
        path = "" if len(words) < 2 else words[1]
        content = get_page(path)
        response_code = "200 OK" if content else "404 Not Found"
        # Create the response
        response = f"HTTP/1.1 {response_code}\r\n\r\n"
        if content:
            response += f"{content}\r\n"
        # Respond to the client
        client_socket.sendall(response.encode(STYLE))


def setup_server(host, port):
    """
    Returns a socket listening on (host, port)
    """

    # Create a socket object
    # socket.AF_INET: indicates IPv4
    # socket.SOCK_STREAM: indicates TCP
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to a specific host and port
    # Should complain if host or port is not valid
    server_socket.bind((host, port))

    # Start listening
    server_socket.listen(BACKLOG)

    print(f"Server listening on {host}:{port}")

    return server_socket


def handle_connections(server_socket):
    """
    Accepts HTTP requests (forever) listening on
    server_socket
    """
    print(f"Handling connection for {server_socket.getsockname()}, pid: {os.getpid()}")
    while True:
        try:
            # Wait for a connection
            client_socket, client_address = server_socket.accept()
            print(f"Received a new connection from {client_address}")
            handle_request(client_socket)
        except SystemExit:
            print("Worker terminating....")
        except Exception as e:
            print(str(e))
        finally:
            # Close the connection
            if client_socket:
                client_socket.close()
                print(f"Closed the connection from {client_address}")
        
        

def main():
    server_host = LOCALHOST
    server_port = PORT
    server_socket = None
    try:
        server_socket = setup_server(server_host, server_port)
    except Exception as e:
        print(str(e))
        print("setup_server failed! Exiting...")
        return

    if server_socket is None:
        print("Invalid server socket. Exiting")
        return

    workers = []

    for i in range(WORKER_SIZE):
        p = None
        if USE_THREADING:
            p = threading.Thread(target=handle_connections, args=(server_socket,))
        else:
            p = multiprocessing.Process(target=handle_connections, args=(server_socket,))
        workers.append(p)

    for worker in workers:
        worker.start()

    try:
        # Wait until main process is manually killed
        while True:
            # do nothing
            pass
    except KeyboardInterrupt:
        print(f"\nExiting due to a Keyboard interrupt")
    finally:
        # Close all the workers
        if not USE_THREADING:
            for worker in workers:
                worker.terminate()

        # Wait for all workers to join
        for worker in workers:
            # in case of threads this will wait
            # forever, user will have to send
            # keyboard interrup-again
            # Not optimal. 
            worker.join()

        print("Server is shutting down.")
        # Close the server socket
        if server_socket:
            server_socket.close()

if __name__ == "__main__":
    main()
