#!/usr/bin/env python3
"""
Just run ./start_server

This will create a HTTP server listening at LOCALHOST:PORT
"""

import socket

# Max number of connections in the queue
BACKLOG = 5

# Max size of data read from a socket
MAX_DATA_SIZE = 1024

# Encoding style
STYLE = "utf-8"

# Localhost
LOCALHOST = "127.0.0.1"

# Port to start the server at
PORT = 2001

def get_page(path):
    WEB_DIR = "www" # a dir to store all webpages
    if path == "":
        return None
    if path == "/":
        path = "/index.html"

    try:
        with open (WEB_DIR + path, 'r') as file:
            content = file.read()
        return content
    except FileNotFoundError as f:
        return None

def handle_request(client_socket):

    data = client_socket.recv(MAX_DATA_SIZE).decode(STYLE)
    lines = data.split('\r\n')
    if lines:
        line = lines[0]
        words = line.split(' ')
        path = "" if len(words) < 2 else words[1]
        content = get_page(path)
        response_code = "200 OK" if content else "404 Not Found"
        # Create the response
        response = f"HTTP/1.1 {response_code}\r\n\r\n"
        if content:
            response += f"{content}\r\n"
        # Respond to the client
        client_socket.sendall(response.encode(STYLE))


def start_server(host, port):
    """
    Starts the HTTP server and listens forever.
    """

    # Create a socket object
    # socket.AF_INET: indicates IPv4
    # socket.SOCK_STREAM: indicates TCP
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to a specific host and port
    # Should complain if host or port is not valid
    server_socket.bind((host, port))

    # Start listening
    server_socket.listen(BACKLOG)

    print(f"Server listening on {host}:{port}")

    try:
        while True:
            try:
                # Wait for a connection
                client_socket, client_address = server_socket.accept()
                print(f"Received a new connection from {client_address}")
                handle_request(client_socket)
            except Exception as e:
                print(str(e))
            finally:
                # Close the connection
                if client_socket:
                    client_socket.close()
                    print(f"Closed the connection from {client_address}")

    except KeyboardInterrupt:
        print(f"\nExiting due to a Keyboard interrupt")
    finally:
        print("Server is shutting down.")
        # Close the server socket
        server_socket.close()

if __name__ == "__main__":
    server_host = LOCALHOST
    server_port = PORT
    start_server(server_host, server_port)
